@page "/import"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@rendermode InteractiveServer

@inject IHttpClientFactory factory
@inject TokenModel tokenInfo

<PageTitle>Meter Reading Import</PageTitle>

<h1>Import File</h1>

@if (isLoggedIn)
{
    <p class="pb-2">Please select a file to upload:</p>

    <InputFile class="mb-3" OnChange="SelectFile" />

    <div>
        <button class="btn btn-outline-success mb-3" @onclick="UploadFile">Upload</button>
    </div>
}
else
{
    <p class="text-danger">Please Log In</p>
}

@if (fileSuccess == true)
{
    <p class="text-primary">Upload Successful!</p>
    <p>@loadResults?.Successes lines were loaded. @loadResults?.Failures lines were skipped. Any errors are listed below.</p>
    
    @if (loadResults?.ErrorMessages != null && loadResults?.ErrorMessages.Count > 0)
    {
        <ul>
            @foreach (var error in loadResults?.ErrorMessages ?? new())
            {
                <li class="text-danger">@error</li>
            }
        </ul>
    }
}
else if (fileSuccess == false)
{
    <p class="text-danger">Upload Failed: @errorMessage</p>
}

@code {
    private IBrowserFile? selectedFile;
    private HttpClient? client;
    private LoadResults? loadResults;
    private bool? fileSuccess = null;
    private string errorMessage = string.Empty;
    private bool isLoggedIn = false;

    protected override void OnInitialized()
    {
        isLoggedIn = !string.IsNullOrWhiteSpace(tokenInfo.Token);
    }

    private void SelectFile(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        fileSuccess = null;
    }

    private async Task UploadFile()
    {
        if (selectedFile is null)
        {
            fileSuccess = false;
            errorMessage = "No File Selected";
            return;
        }

        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", tokenInfo.Token);

        using var content = new MultipartFormDataContent();
        var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        content.Add(new StreamContent(stream), "file", selectedFile.Name);

        var response = await client.PostAsync("MeterReading/meter-reading-uploads", content);

        if (response.IsSuccessStatusCode)
        {
            loadResults = await response.Content.ReadFromJsonAsync<LoadResults>();
            fileSuccess = true;
        }
        else
        {
            errorMessage = response?.ReasonPhrase ?? string.Empty;
            fileSuccess = false;
        }

        await InvokeAsync(StateHasChanged);
    }
}
